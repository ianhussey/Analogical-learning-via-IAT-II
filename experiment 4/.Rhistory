knitr::opts_chunk$set(message=FALSE,
warning=FALSE,
cache.lazy=FALSE)
# dependencies
library(tidyverse)
library(psych)
library(weights)  # for rd(), a round() alternative
library(plotrix)  # for std.error
library(lme4)
library(effects)
library(knitr)
library(kableExtra)
library(sjPlot)
library(apa)
# set table formatting for html
options(knitr.table.format = "html")
# rounds all numerics in a df
round_df <- function(df, digits) {
nums <- vapply(df, is.numeric, FUN.VALUE = logical(1))
df[,nums] <- round(df[,nums], digits = digits)
(df)
}
# options
options(knitr.table.format = "html") # necessary configuration of tables
# disable scientific notation
options(scipen = 999)
# get data from exp 1
setwd(params$location_of_exp_1_data)
ratings_data_exp1 <-
read.csv("data/processed/processed ratings data - long format.csv") %>%
dplyr::mutate(experiment = "exp1",
unique_id = as.factor(paste(experiment, participant, sep = "_")),
IAT_condition = as.factor(IAT_condition),
exclude = ifelse(IAT_exclude_based_on_fast_trials == TRUE, TRUE,
ifelse(SCIAT_exclude_based_on_fast_trials == TRUE, TRUE,
FALSE))) %>%
dplyr::select(unique_id, experiment, IAT_condition, exclude, rating, modern_racism_scale_total)
# get data from exp 2
setwd(params$location_of_exp_2_data)
ratings_data_exp2 <-
read.csv("data/processed/processed ratings data - long format.csv") %>%
dplyr::mutate(experiment = "exp2",
unique_id = as.factor(paste(experiment, participant, sep = "_")),
IAT_condition = as.factor(IAT_condition),
exclude = ifelse(IAT_exclude_based_on_fast_trials == TRUE, TRUE, FALSE)) %>%
dplyr::select(unique_id, experiment, IAT_condition, exclude, rating, modern_racism_scale_total)
# get data from exp 3
setwd(params$location_of_exp_3_data)
ratings_data_exp3 <-
read.csv("data/processed/processed ratings data - long format.csv") %>%
dplyr::mutate(experiment = "exp3",
unique_id = as.factor(paste(experiment, participant, sep = "_")),
IAT_condition = as.factor(IAT_condition),
exclude = ifelse(IAT_exclude_based_on_fast_trials == TRUE, TRUE, FALSE)) %>%
dplyr::select(unique_id, experiment, IAT_condition, exclude, rating, modern_racism_scale_total)
# get data from exp 4
setwd(params$location_of_exp_4_data)
ratings_data_exp4 <-
read.csv("data/processed/processed ratings data - long format.csv") %>%
dplyr::mutate(experiment = "exp4",
unique_id = as.factor(paste(experiment, participant, sep = "_")),
IAT_condition = as.factor(IAT_condition),
exclude = ifelse(IAT_exclude_based_on_fast_trials == TRUE, TRUE, FALSE)) %>%
dplyr::select(unique_id, experiment, IAT_condition, exclude, rating, modern_racism_scale_total)
# combine
combined_ratings_data <- rbind(ratings_data_exp1,
ratings_data_exp2,
ratings_data_exp3,
ratings_data_exp4) %>%
filter(exclude == FALSE) %>%
mutate(IAT_condition = fct_relevel(as.factor(IAT_condition), "Race IAT", "Flowers-Insects IAT"),
unique_id = as.factor(unique_id),
experiment = as.factor(experiment))
model_sr_meta <-
lmer(rating ~ IAT_condition + modern_racism_scale_total + (1 | experiment) + (1 | unique_id),
contrasts = list(IAT_condition = "contr.sum"),
data = combined_ratings_data)
# model each experiment for plotting
model_sr_1 <-
lmer(rating ~ IAT_condition + modern_racism_scale_total + (1 | unique_id),
contrasts = list(IAT_condition = "contr.sum"),
data = ratings_data_exp1)
model_sr_2 <-
lmer(rating ~ IAT_condition + modern_racism_scale_total + (1 | unique_id),
contrasts = list(IAT_condition = "contr.sum"),
data = ratings_data_exp2)
model_sr_3 <-
lmer(rating ~ IAT_condition + modern_racism_scale_total + (1 | unique_id),
contrasts = list(IAT_condition = "contr.sum"),
data = ratings_data_exp3)
model_sr_4 <-
lmer(rating ~ IAT_condition + modern_racism_scale_total + (1 | unique_id),
contrasts = list(IAT_condition = "contr.sum"),
data = ratings_data_exp4)
sjt.lmer(model_sr_meta,
emph.p = FALSE,
p.kr = FALSE,
show.std = TRUE)
sjp.lmer(model_sr_meta,
p.kr = FALSE,
type = "fe")
# n per condition per study
sr_1_n <- ratings_data_exp1 %>%
count(IAT_condition) %>%
spread(IAT_condition, n) %>%
mutate(experiment = "Experiment 1")
sr_2_n <- ratings_data_exp2 %>%
count(IAT_condition) %>%
spread(IAT_condition, n) %>%
mutate(experiment = "Experiment 2")
sr_3_n <- ratings_data_exp3 %>%
count(IAT_condition) %>%
spread(IAT_condition, n) %>%
mutate(experiment = "Experiment 3")
sr_4_n <- ratings_data_exp4 %>%
count(IAT_condition) %>%
spread(IAT_condition, n) %>%
mutate(experiment = "Experiment 4")
sr_n <- rbind(sr_1_n, sr_2_n, sr_3_n, sr_4_n) %>%
gather(IAT_condition, n, c("Race IAT", "Flowers-Insects IAT")) %>%
mutate(percent_n = round(n/sum(n), 3)) %>%
arrange(experiment)
# predicted effects
model_sr_meta_predicted_effects <- as.data.frame(effect("IAT_condition", model_sr_meta)) %>%
mutate(experiment = "Meta-analysis")
model_sr_1_predicted_effects <- as.data.frame(effect("IAT_condition", model_sr_1)) %>%
mutate(experiment = "Experiment 1")
model_sr_2_predicted_effects <- as.data.frame(effect("IAT_condition", model_sr_2)) %>%
mutate(experiment = "Experiment 2")
model_sr_3_predicted_effects <- as.data.frame(effect("IAT_condition", model_sr_3)) %>%
mutate(experiment = "Experiment 3")
model_sr_4_predicted_effects <- as.data.frame(effect("IAT_condition", model_sr_4)) %>%
mutate(experiment = "Experiment 4")
# combine
model_predicted_effects_sr <- rbind(model_sr_1_predicted_effects,
model_sr_2_predicted_effects,
model_sr_3_predicted_effects,
model_sr_4_predicted_effects,
model_sr_meta_predicted_effects) %>%
left_join(sr_n, by = c("experiment", "IAT_condition")) %>%
mutate(percent_n = ifelse(is.na(percent_n), 5, percent_n*5)) %>%  # needs thought
mutate(experiment = fct_relevel(experiment,
"Meta-analysis",
"Experiment 4",
"Experiment 3",
"Experiment 2",
"Experiment 1"))
model_predicted_effects_sr %>%
round_df(2) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
ggplot(data = model_predicted_effects_sr,
aes(x = experiment, color = IAT_condition)) +
geom_point(aes(y = fit,
size = percent_n),
position = position_dodge(width=0.75),
shape = 15,
show.legend = FALSE) +
geom_linerange(aes(ymax = upper,
ymin = lower),
position = position_dodge(width=0.75)) +
ylab("Rating") +
xlab("") +
scale_colour_grey() +
theme_classic() +
#ylim(3.8, 4.9) +
coord_flip()
# get data from exp 2
setwd(params$location_of_exp_2_data)
amp_data_exp2 <-
read.csv("data/processed/processed AMP data - long format.csv") %>%
dplyr::filter(exclude == FALSE,
IAT_exclude_based_on_fast_trials == FALSE) %>%
dplyr::mutate(participant = as.factor(participant),
rating_factor = as.factor(ifelse(accuracy == 0, "negative",
ifelse(accuracy == 1, "positive", NA))),
IAT_condition = as.factor(IAT_condition)) %>%
dplyr::rename(prime_type = item,
rating = accuracy) %>%
dplyr::mutate(experiment = "exp2",
unique_id = as.factor(paste(experiment, participant, sep = "_"))) %>%
dplyr::select(-AMP_exclude_based_on_fast_trials_old)
# get data from exp 4
setwd(params$location_of_exp_4_data)
amp_data_exp4 <-
read.csv("data/processed/processed AMP data - long format.csv") %>%
dplyr::filter(exclude == FALSE,
IAT_exclude_based_on_fast_trials == FALSE) %>%
dplyr::mutate(participant = as.factor(participant),
rating_factor = as.factor(ifelse(accuracy == 0, "negative",
ifelse(accuracy == 1, "positive", NA))),
IAT_condition = as.factor(IAT_condition)) %>%
dplyr::rename(prime_type = item,
rating = accuracy) %>%
dplyr::mutate(experiment = "exp4",
unique_id = as.factor(paste(experiment, participant, sep = "_")))
# combine
combined_amp_data <- rbind(amp_data_exp2,
amp_data_exp4) %>%
filter(exclude == FALSE) %>%
mutate(IAT_condition = fct_relevel(as.factor(IAT_condition), "Race IAT", "Flowers-Insects IAT"),
unique_id = as.factor(unique_id),
experiment = as.factor(experiment))
# all of the following throw convergence issue warnings, despite the fact that identical models in the separate experiments do not. I consulted the convergence issue page (https://rstudio-pubs-static.s3.amazonaws.com/33653_57fc7b8e5d484c909b615d8633c01d51.html) but this didn't shed any light on the issue. experimentaation showed that changing "unique_id" to "participant" resolves the issue, even though checking shows that the two are identical, i.e., both factors with the same unique values and N rows each. Experimenting with how unique_id is calculated (e.g., special characters or not, factor or character, etc) does not resolve the issue. When I compared the summary() output of two models using participant (with no convergence issues) vs unique_id (with convergence issues) there were no substantive differences in their results. As such, I'll proceed to use the model despite the supposed convergence issue.
# need to check if there are participant code collisions, ie is unique_id needed ###
model_amp_meta <-
glmer(rating ~ prime_type * IAT_condition + modern_racism_scale_total + (1 | experiment) + (1 | participant),
family = "binomial",
contrasts = list(prime_type = "contr.sum",
IAT_condition = "contr.sum"),
control = glmerControl(optimizer = "bobyqa",           # alt optimizer
optCtrl = list(maxfun = 2e5)),  # increased iterations
data = combined_amp_data)
model_amp_2 <-
glmer(rating ~ prime_type * IAT_condition + modern_racism_scale_total + (1 | participant),
family = "binomial",
contrasts = list(prime_type = "contr.sum",
IAT_condition = "contr.sum"),
data = amp_data_exp2)
model_amp_4 <-
glmer(rating ~ prime_type * IAT_condition + modern_racism_scale_total + (1 | participant),
family = "binomial",
contrasts = list(prime_type = "contr.sum",
IAT_condition = "contr.sum"),
data = amp_data_exp4)
knitr::opts_chunk$set(message=FALSE,
warning=FALSE,
cache.lazy=FALSE)
# dependencies
library(tidyverse)
library(psych)
library(weights)  # for rd(), a round() alternative
library(plotrix)  # for std.error
library(lme4)
library(effects)
library(knitr)
library(kableExtra)
library(sjPlot)
library(apa)
# rounds all numerics in a df
round_df <- function(df, digits) {
nums <- vapply(df, is.numeric, FUN.VALUE = logical(1))
df[,nums] <- round(df[,nums], digits = digits)
(df)
}
# options
options(knitr.table.format = "html") # necessary configuration of tables
# disable scientific notation
options(scipen = 999)
# get data
data_df <-
read.csv("data/processed/processed summary data - wide format.csv") %>%
mutate(gender = as.factor(gender))
#colnames(data_df)
attrition_rate <- data_df %>%
dplyr::summarize(rate = round(sum(exclude)/n()*100, 1)) %>%
as.numeric()
data_df %>%
count(exclude) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
chi2_result <- data_df %>%
count(IAT_condition, exclude) %>%
spread(exclude, n) %>%
select(-IAT_condition) %>%
chisq.test(.) %>%
chisq_apa(., print_n = TRUE, format = c("rmarkdown"), info = FALSE, print = FALSE)
passers_df <- data_df %>%
filter(exclude == FALSE)
N <- passers_df %>%
dplyr::summarize(n = n()) %>%
as.numeric()
passers_df %>%
count(AMP_exclude_based_on_fast_trials_old) %>%
rowwise() %>%
mutate(percent = round(n/N*100, 1)) %>%
ungroup() %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
passers_df %>%
dplyr::select(age) %>%
psych::describe(fast = TRUE,  # subset of descriptive stats
ranges = FALSE,
trim = 0) %>%
dplyr::select(-vars, -se) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
passers_df %>%
dplyr::count(gender) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
passers_df %>%
dplyr::select(IAT_mean_RT,
IAT_perc_acc,
AMP_mean_RT,
AMP_perc_acc) %>%
psych::describe(fast = TRUE,  # subset of descriptive stats
ranges = FALSE,
trim = 0) %>%
dplyr::select(-vars, -se) %>%
mutate(mean = round(mean, 2),
sd = round(sd, 2)) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
AMP_data <-
read.csv("data/processed/processed AMP data - long format.csv") %>%
dplyr::filter(exclude == FALSE,
IAT_exclude_based_on_fast_trials == FALSE) %>%
dplyr::mutate(participant = as.factor(participant),
rating_factor = as.factor(ifelse(accuracy == 0, "negative",
ifelse(accuracy == 1, "positive", NA))),
IAT_condition = as.factor(IAT_condition)) %>%
dplyr::rename(prime_type = item,
rating = accuracy)
model_1 <- glmer(rating ~ prime_type * IAT_condition + modern_racism_scale_total + (1 | participant),
family = "binomial",
contrasts = list(prime_type = "contr.sum",
IAT_condition = "contr.sum"),
data = AMP_data)
knitr::opts_chunk$set(message=FALSE,
warning=FALSE,
cache.lazy=FALSE)
# dependencies
library(tidyverse)
library(psych)
library(weights)  # for rd(), a round() alternative
library(plotrix)  # for std.error
library(lme4)
library(effects)
library(knitr)
library(kableExtra)
library(sjPlot)
library(apa)
# rounds all numerics in a df
round_df <- function(df, digits) {
nums <- vapply(df, is.numeric, FUN.VALUE = logical(1))
df[,nums] <- round(df[,nums], digits = digits)
(df)
}
# options
options(knitr.table.format = "html") # necessary configuration of tables
# disable scientific notation
options(scipen = 999)
# get data
data_df <-
read.csv("data/processed/processed summary data - wide format.csv") %>%
mutate(gender = as.factor(gender))
#colnames(data_df)
attrition_rate <- data_df %>%
dplyr::summarize(rate = round(sum(exclude)/n()*100, 1)) %>%
as.numeric()
data_df %>%
count(exclude) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
chi2_result <- data_df %>%
count(IAT_condition, exclude) %>%
spread(exclude, n) %>%
select(-IAT_condition) %>%
chisq.test(.) %>%
chisq_apa(., print_n = TRUE, format = c("rmarkdown"), info = FALSE, print = FALSE)
passers_df <- data_df %>%
filter(exclude == FALSE)
N <- passers_df %>%
dplyr::summarize(n = n()) %>%
as.numeric()
passers_df %>%
count(AMP_exclude_based_on_fast_trials_old) %>%
rowwise() %>%
mutate(percent = round(n/N*100, 1)) %>%
ungroup() %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
passers_df %>%
dplyr::select(age) %>%
psych::describe(fast = TRUE,  # subset of descriptive stats
ranges = FALSE,
trim = 0) %>%
dplyr::select(-vars, -se) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
passers_df %>%
dplyr::count(gender) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
AMP_participant_summary_data <-
AMP_data %>%
group_by(participant) %>%
dplyr::summarize(perc_rating = round(mean(rating), 2))
ggplot(AMP_participant_summary_data,
aes(perc_rating)) +
geom_density(alpha=0.50) +
theme_classic()
model_1 <- glmer(rating ~ prime_type * IAT_condition + modern_racism_scale_total + (1 | participant),
family = "binomial",
contrasts = list(prime_type = "contr.sum",
IAT_condition = "contr.sum"),
data = AMP_data)
knitr::opts_chunk$set(message=FALSE,
warning=FALSE,
cache.lazy=FALSE)
# dependencies
library(tidyverse)
library(psych)
library(weights)  # for rd(), a round() alternative
library(plotrix)  # for std.error
library(lme4)
library(effects)
library(knitr)
library(kableExtra)
library(sjPlot)
library(apa)
# rounds all numerics in a df
round_df <- function(df, digits) {
nums <- vapply(df, is.numeric, FUN.VALUE = logical(1))
df[,nums] <- round(df[,nums], digits = digits)
(df)
}
# options
options(knitr.table.format = "html") # necessary configuration of tables
# disable scientific notation
options(scipen = 999)
# get data
data_df <-
read.csv("data/processed/processed summary data - wide format.csv") %>%
mutate(gender = as.factor(gender))
#colnames(data_df)
attrition_rate <- data_df %>%
dplyr::summarize(rate = round(sum(exclude)/n()*100, 1)) %>%
as.numeric()
data_df %>%
count(exclude) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
chi2_result <- data_df %>%
count(IAT_condition, exclude) %>%
spread(exclude, n) %>%
select(-IAT_condition) %>%
chisq.test(.) %>%
chisq_apa(., print_n = TRUE, format = c("rmarkdown"), info = FALSE, print = FALSE)
passers_df <- data_df %>%
filter(exclude == FALSE)
N <- passers_df %>%
dplyr::summarize(n = n()) %>%
as.numeric()
passers_df %>%
count(AMP_exclude_based_on_fast_trials_old) %>%
rowwise() %>%
mutate(percent = round(n/N*100, 1)) %>%
ungroup() %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
passers_df %>%
dplyr::select(age) %>%
psych::describe(fast = TRUE,  # subset of descriptive stats
ranges = FALSE,
trim = 0) %>%
dplyr::select(-vars, -se) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
passers_df %>%
dplyr::count(gender) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
passers_df %>%
dplyr::select(IAT_mean_RT,
IAT_perc_acc,
AMP_mean_RT,
AMP_perc_acc) %>%
psych::describe(fast = TRUE,  # subset of descriptive stats
ranges = FALSE,
trim = 0) %>%
dplyr::select(-vars, -se) %>%
mutate(mean = round(mean, 2),
sd = round(sd, 2)) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
AMP_data <-
read.csv("data/processed/processed AMP data - long format.csv") %>%
dplyr::filter(exclude == FALSE,
IAT_exclude_based_on_fast_trials == FALSE) %>%
dplyr::mutate(participant = as.factor(participant),
rating_factor = as.factor(ifelse(accuracy == 0, "negative",
ifelse(accuracy == 1, "positive", NA))),
IAT_condition = as.factor(IAT_condition)) %>%
dplyr::rename(prime_type = item,
rating = accuracy)
# Check that variables that should be factors are indeed factors
sapply(AMP_data, class)
AMP_participant_summary_data <-
AMP_data %>%
group_by(participant) %>%
dplyr::summarize(perc_rating = round(mean(rating), 2))
ggplot(AMP_participant_summary_data,
aes(perc_rating)) +
geom_density(alpha=0.50) +
theme_classic()
model_1 <- glmer(rating ~ prime_type * IAT_condition + modern_racism_scale_total + (1 | participant),
family = "binomial",
contrasts = list(prime_type = "contr.sum",
IAT_condition = "contr.sum"),
data = AMP_data)
tt <- getME(model_1,"theta")
ll <- getME(model_1,"lower")
min(tt[ll==0])
install.packages("lme4")
install.packages("lme4")
install.packages("lme4")
install.packages("lme4")
library(lme4)
