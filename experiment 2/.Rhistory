ylab("Rating") +
xlab("") +
scale_colour_grey() +
theme_classic() +
#ylim(3.8, 4.9) +
coord_flip()
# get data from exp 2
setwd(params$location_of_exp_2_data)
amp_data_exp2 <-
read.csv("data/processed/processed AMP data - long format.csv") %>%
dplyr::filter(exclude == FALSE,
IAT_exclude_based_on_fast_trials == FALSE) %>%
dplyr::mutate(participant = as.factor(participant),
rating_factor = as.factor(ifelse(accuracy == 0, "negative",
ifelse(accuracy == 1, "positive", NA))),
IAT_condition = as.factor(IAT_condition)) %>%
dplyr::rename(prime_type = item,
rating = accuracy) %>%
dplyr::mutate(experiment = "exp2",
unique_id = as.factor(paste(experiment, participant, sep = "_"))) %>%
dplyr::select(-AMP_exclude_based_on_fast_trials_old)
# get data from exp 4
setwd(params$location_of_exp_4_data)
amp_data_exp4 <-
read.csv("data/processed/processed AMP data - long format.csv") %>%
dplyr::filter(exclude == FALSE,
IAT_exclude_based_on_fast_trials == FALSE) %>%
dplyr::mutate(participant = as.factor(participant),
rating_factor = as.factor(ifelse(accuracy == 0, "negative",
ifelse(accuracy == 1, "positive", NA))),
IAT_condition = as.factor(IAT_condition)) %>%
dplyr::rename(prime_type = item,
rating = accuracy) %>%
dplyr::mutate(experiment = "exp4",
unique_id = as.factor(paste(experiment, participant, sep = "_")))
# combine
combined_amp_data <- rbind(amp_data_exp2,
amp_data_exp4) %>%
filter(exclude == FALSE) %>%
mutate(IAT_condition = fct_relevel(as.factor(IAT_condition), "Race IAT", "Flowers-Insects IAT"),
unique_id = as.factor(unique_id),
experiment = as.factor(experiment))
temp <- combined_amp_data %>%
distinct(participant, .keep_all = TRUE) %>%
mutate(modern_racism_scale_total_scaled = scale(modern_racism_scale_total)) %>%
select(participant, modern_racism_scale_total_scaled)
combined_amp_data_mod <- combined_amp_data %>%
left_join(temp, by = "unique_id")
temp <- combined_amp_data %>%
distinct(unique_id, .keep_all = TRUE) %>%
mutate(modern_racism_scale_total_scaled = scale(modern_racism_scale_total)) %>%
select(unique_id, modern_racism_scale_total_scaled)
combined_amp_data_mod <- combined_amp_data %>%
left_join(temp, by = "unique_id")
model_amp_meta <-
glmer(rating ~ prime_type * IAT_condition + modern_racism_scale_total_scaled + (1 | experiment) + (1 | unique_id),
family = "binomial",
contrasts = list(prime_type = "contr.sum",
IAT_condition = "contr.sum"),
data = combined_amp_data_mod)
# individual models for plotting
temp <- amp_data_exp2 %>%
distinct(unique_id, .keep_all = TRUE) %>%
mutate(modern_racism_scale_total_scaled = scale(modern_racism_scale_total)) %>%
select(unique_id, modern_racism_scale_total_scaled)
amp_data_exp2_mod <- amp_data_exp2 %>%
left_join(temp, by = "unique_id")
model_amp_2 <-
glmer(rating ~ prime_type * IAT_condition + modern_racism_scale_total_scaled + (1 | unique_id),
family = "binomial",
contrasts = list(prime_type = "contr.sum",
IAT_condition = "contr.sum"),
data = amp_data_exp2_mod)
temp <- amp_data_exp4 %>%
distinct(unique_id, .keep_all = TRUE) %>%
mutate(modern_racism_scale_total_scaled = scale(modern_racism_scale_total)) %>%
select(unique_id, modern_racism_scale_total_scaled)
amp_data_exp4_mod <- amp_data_exp4 %>%
left_join(temp, by = "unique_id")
model_amp_4 <-
glmer(rating ~ prime_type * IAT_condition + modern_racism_scale_total_scaled + (1 | unique_id),
family = "binomial",
contrasts = list(prime_type = "contr.sum",
IAT_condition = "contr.sum"),
data = amp_data_exp4)
model_amp_4 <-
glmer(rating ~ prime_type * IAT_condition + modern_racism_scale_total_scaled + (1 | unique_id),
family = "binomial",
contrasts = list(prime_type = "contr.sum",
IAT_condition = "contr.sum"),
data = amp_data_exp4_mod)
model_amp_2 <-
glmer(rating ~ prime_type * IAT_condition + modern_racism_scale_total_scaled + (1 | unique_id),
family = "binomial",
contrasts = list(prime_type = "contr.sum",
IAT_condition = "contr.sum"),
data = amp_data_exp2_mod)
sjt.lmer(model_amp_meta,
emph.p = FALSE,
p.kr = FALSE,
show.std = TRUE)
sjt.lmer(model_amp_2,
emph.p = FALSE,
p.kr = FALSE,
show.std = TRUE)
sjt.lmer(model_amp_4,
emph.p = FALSE,
p.kr = FALSE,
show.std = TRUE)
model_amp_4
sjt.lmer(model_amp_meta,
emph.p = FALSE,
p.kr = FALSE,
show.std = TRUE)
sjt.lmer(model_amp_meta)
sjt.lmer(model_amp_2)
sjp.lmer(model_amp_meta,
p.kr = FALSE,
type = "fe")
# n per condition per study
amp_2_n <- amp_data_exp2 %>%
count(IAT_condition) %>%
spread(IAT_condition, n) %>%
mutate(experiment = "Experiment 2")
amp_4_n <- amp_data_exp4 %>%
count(IAT_condition) %>%
spread(IAT_condition, n) %>%
mutate(experiment = "Experiment 4")
amp_n <- rbind(amp_2_n, amp_4_n) %>%
gather(IAT_condition, n, c("Race IAT", "Flowers-Insects IAT")) %>%
mutate(percent_n = round(n/sum(n), 3)) %>%
arrange(experiment)
# predicted effects
model_amp_meta_predicted_effects <- as.data.frame(effect("prime_type:IAT_condition", model_amp_meta)) %>%
mutate(experiment = "Meta-analysis")
model_amp_2_predicted_effects <- as.data.frame(effect("prime_type:IAT_condition", model_amp_2)) %>%
mutate(experiment = "Experiment 2")
model_amp_4_predicted_effects <- as.data.frame(effect("prime_type:IAT_condition", model_amp_4)) %>%
mutate(experiment = "Experiment 4")
# combine
model_predicted_effects_amp <- rbind(model_amp_2_predicted_effects,
model_amp_4_predicted_effects,
model_amp_meta_predicted_effects) %>%
left_join(amp_n, by = c("experiment", "IAT_condition")) %>%
mutate(percent_n = ifelse(is.na(percent_n), 1, percent_n)) %>%  # needs thought
mutate(experiment = fct_relevel(experiment,
"Meta-analysis",
"Experiment 4",
"Experiment 2"))
model_predicted_effects_amp %>%
round_df(2) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
ggplot(data = model_predicted_effects_amp,
aes(x = experiment, color = IAT_condition)) +
geom_point(aes(y = fit,
size = percent_n),
position = position_dodge(width=0.75),
shape = 15,
show.legend = FALSE) +
geom_linerange(aes(ymax = upper,
ymin = lower),
position = position_dodge(width=0.75)) +
ylab("Rating") +
xlab("") +
scale_colour_grey() +
theme_classic() +
#ylim(3.8, 4.9) +
coord_flip() +
facet_wrap(~prime_type)
# size of meta points needs thought/work
# combine
model_predicted_effects_amp <- rbind(model_amp_2_predicted_effects,
model_amp_4_predicted_effects,
model_amp_meta_predicted_effects) %>%
left_join(amp_n, by = c("experiment", "IAT_condition")) %>%
mutate(percent_n = ifelse(is.na(percent_n), .5, percent_n)) %>%  # hard code value needs thought
mutate(experiment = fct_relevel(experiment,
"Meta-analysis",
"Experiment 4",
"Experiment 2"))
model_predicted_effects_amp %>%
round_df(2) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
ggplot(data = model_predicted_effects_amp,
aes(x = experiment, color = IAT_condition)) +
geom_point(aes(y = fit,
size = percent_n),
position = position_dodge(width=0.75),
shape = 15,
show.legend = FALSE) +
geom_linerange(aes(ymax = upper,
ymin = lower),
position = position_dodge(width=0.75)) +
ylab("Rating") +
xlab("") +
scale_colour_grey() +
theme_classic() +
#ylim(3.8, 4.9) +
coord_flip() +
facet_wrap(~prime_type)
sjt.lmer(model_amp_2,
emph.p = FALSE,
p.kr = FALSE,
show.std = TRUE)
sjt.glmer(model_amp_meta,
emph.p = FALSE,
p.kr = FALSE,
show.std = TRUE)
sjt.glmer(model_1,
emph.p = FALSE,
digits.p = 7)
sjt.glmer(model_amp_meta,
emph.p = FALSE,
digits.p = 7)
sjt.glmer(model_amp_meta,
emph.p = FALSE,
digits.p = 7)
sjt.glmer(model_amp_2,
emph.p = FALSE,
digits.p = 7)
sjt.glmer(model_amp_4,
emph.p = FALSE,
digits.p = 7)
sjt.glmer(model_amp_meta,
emph.p = FALSE,
digits.p = 7)
sjt.glmer(model_amp_meta,
emph.p = FALSE,
digits.p = 9)
sjt.glmer(model_amp_meta,
emph.p = FALSE,
digits.p = 12)
sjt.glmer(model_amp_meta,
emph.p = FALSE,
digits.p = 11)
sjt.glmer(model_amp_2,
emph.p = FALSE,
digits.p = 7)
sjt.glmer(model_amp_4,
emph.p = FALSE,
digits.p = 7)
sjt.glmer(model_amp_4,
emph.p = FALSE,
digits.p = 5)
sjt.glmer(model_amp_meta,
emph.p = FALSE,
digits.p = 11)
sjt.glmer(model_amp_2,
emph.p = FALSE,
digits.p = 7)
sjt.glmer(model_amp_4,
emph.p = FALSE,
digits.p = 5)
sjt.glmer(model_amp_meta,
emph.p = FALSE,
digits.p = 11)
sjt.glmer(model_amp_meta,
emph.p = FALSE,
digits.p = 11)
sjt.glmer(model_amp_2,
emph.p = FALSE,
digits.p = 7)
sjt.glmer(model_amp_4,
emph.p = FALSE,
digits.p = 5)
sjp.lmer(model_amp_meta,
p.kr = FALSE,
type = "fe")
sjp.glmer(model_amp_meta,
p.kr = FALSE,
type = "fe")
sjp.glmer(model_amp_meta,
p.kr = FALSE,
type = "fe")
plot_model(model_amp_meta,
p.kr = FALSE,
type = "fe")
plot_model(model_amp_meta,
p.kr = FALSE,
type = "est")
sjp.lmer(model_amp_meta,
p.kr = FALSE,
type = "fe")
plot_model(model_amp_meta,
p.kr = FALSE,
type = "est")
sjp.lmer(model_amp_meta,
p.kr = FALSE,
type = "fe")
?plot_model
plot_model(model_amp_meta,
p.kr = FALSE,
type = "std")
plot_model(model_amp_meta,
p.kr = FALSE,
type = "est")
plot_model(model_amp_meta,
p.kr = FALSE,
type = "std")
plot_model(model_amp_meta,
p.kr = FALSE,
type = "pred")
plot_model(model_amp_meta,
p.kr = FALSE,
show.p = true,
type = "pred")
plot_model(model_amp_meta,
p.kr = FALSE,
show.p = true,
type = "est")
plot_model(model_amp_meta,
#p.kr = FALSE,
show.p = true,
type = "est")
plot_model(model_amp_meta,
#p.kr = FALSE,
show.p = TRUE,
type = "est")
plot_model(model_amp_meta,
#p.kr = FALSE,
show.p = TRUE,
show.data = TRUE,
type = "est")
plot_model(model_amp_meta,
#p.kr = FALSE,
show.p = TRUE,
#show.data = TRUE,
type = "est")
plot_model(model_amp_meta,
p.kr = FALSE,
type = "est")
sjp.lmer(model_amp_meta,
p.kr = FALSE,
type = "fe")
sjp.lmer(model_amp_meta,
p.kr = FALSE,
type = "fe")
sjp.lmer(model_amp_2,
p.kr = FALSE,
type = "fe")
sjp.lmer(model_amp_4,
p.kr = FALSE,
type = "fe")
sjp.glmer(model_amp_meta,
p.kr = FALSE,
type = "fe")
sjp.glmer(model_amp_2,
p.kr = FALSE,
type = "fe")
sjp.glmer(model_amp_4,
p.kr = FALSE,
type = "fe")
?sjp.glmer
sjp.lmer(model_amp_meta,
p.kr = FALSE,
type = "fe")
sjp.lmer(model_amp_2,
p.kr = FALSE,
type = "fe")
sjp.lmer(model_amp_4,
p.kr = FALSE,
type = "fe")
sjp.glmer(model_amp_meta,
type = "fe")
sjp.glmer(model_amp_2,
type = "fe")
sjp.glmer(model_amp_4,
type = "fe")
sjp.glmer(model_amp_meta,
type = "fe")
sjp.lmer(model_amp_meta,
type = "fe")
sjp.glmer(model_amp_meta,
type = "fe")
sjp.glmer(model_amp_2,
type = "fe")
sjp.glmer(model_amp_4,
type = "fe")
sjp.glmer(model_amp_meta,
type = "fe")
# n per condition per study
amp_2_n <- amp_data_exp2 %>%
count(IAT_condition) %>%
spread(IAT_condition, n) %>%
mutate(experiment = "Experiment 2")
amp_4_n <- amp_data_exp4 %>%
count(IAT_condition) %>%
spread(IAT_condition, n) %>%
mutate(experiment = "Experiment 4")
amp_n <- rbind(amp_2_n, amp_4_n) %>%
gather(IAT_condition, n, c("Race IAT", "Flowers-Insects IAT")) %>%
mutate(percent_n = round(n/sum(n), 3)) %>%
arrange(experiment)
# predicted effects
model_amp_meta_predicted_effects <- as.data.frame(effect("prime_type:IAT_condition", model_amp_meta)) %>%
mutate(experiment = "Meta-analysis")
model_amp_2_predicted_effects <- as.data.frame(effect("prime_type:IAT_condition", model_amp_2)) %>%
mutate(experiment = "Experiment 2")
model_amp_4_predicted_effects <- as.data.frame(effect("prime_type:IAT_condition", model_amp_4)) %>%
mutate(experiment = "Experiment 4")
# combine
model_predicted_effects_amp <- rbind(model_amp_2_predicted_effects,
model_amp_4_predicted_effects,
model_amp_meta_predicted_effects) %>%
left_join(amp_n, by = c("experiment", "IAT_condition")) %>%
mutate(percent_n = ifelse(is.na(percent_n), .5, percent_n)) %>%  # hard code value needs thought
mutate(experiment = fct_relevel(experiment,
"Meta-analysis",
"Experiment 4",
"Experiment 2"))
model_predicted_effects_amp %>%
round_df(2) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
knitr::opts_chunk$set(echo = FALSE,
message = FALSE,
warning = FALSE)
# dependencies
library(tidyverse)
library(knitr)
# set seed
set.seed(42)
# notation off
options(scipen = 999)
# options
options(knitr.table.format = "html")  # comment out if knitting to pdf
# rounds all numerics in a df
round_df <- function(df, digits) {
nums <- vapply(df, is.numeric, FUN.VALUE = logical(1))
df[,nums] <- round(df[,nums], digits = digits)
(df)
}
AMP_data <-
read.csv("data/processed/AMP_data.csv") %>%
filter(exclude == FALSE) %>%
mutate(participant = as.factor(participant),
rating_factor = as.factor(ifelse(accuracy == 0, "negative",
ifelse(accuracy == 1, "positive", NA))),
analogy_condition = as.factor(analogy_condition),
analogy_condition = fct_relevel(analogy_condition,
"negative",
"absent",
"positive"),
ic_condition = as.factor(ic_condition),
ic_condition = fct_relevel(ic_condition,
"negative",
"absent",
"positive"),
item = ifelse(item == "primeNeutral", "Neutral",
ifelse(item == "primeRace", "Lokanta", NA))) %>%
rename(prime_type = item,
rating = accuracy) %>%
select(participant,
condition,
analogy_condition,
ic_condition,
prime_type,
rating)
temp_data_amp <- AMP_data %>%
group_by(participant, prime_type, analogy_condition, ic_condition) %>%
dplyr::summarize(perc_rating = round(mean(rating), 2)) %>%
ungroup() %>%
spread(prime_type, perc_rating) %>%
rowwise() %>%
mutate(diff = Lokanta - Neutral) %>%
ungroup()
# # check this is the right conditions - 2 and 8
# AMP_data %>%
#   filter(analogy_condition != "absent" & ic_condition == "absent") %>%
#   count(condition)
analogy_valenced_ic_absent_amp <- temp_data_amp %>%
filter(analogy_condition != "absent" & ic_condition == "absent")
p <- paste("p =", round(t.test(diff ~ analogy_condition,
data = analogy_valenced_ic_absent_amp)$p.value, 4))
d <- paste("Cohen's d =", round(cohen.d(diff ~ analogy_condition,
data = analogy_valenced_ic_absent_amp)$estimate, 2))
library(effsize)
# # check this is the right conditions - 2 and 8
# AMP_data %>%
#   filter(analogy_condition != "absent" & ic_condition == "absent") %>%
#   count(condition)
analogy_valenced_ic_absent_amp <- temp_data_amp %>%
filter(analogy_condition != "absent" & ic_condition == "absent")
p <- paste("p =", round(t.test(diff ~ analogy_condition,
data = analogy_valenced_ic_absent_amp)$p.value, 4))
d <- paste("Cohen's d =", round(cohen.d(diff ~ analogy_condition,
data = analogy_valenced_ic_absent_amp)$estimate, 2))
analogy_valenced_ic_absent_amp %>%
group_by(analogy_condition) %>%
summarize(mean = mean(diff),
se = std.error(diff)) %>%
ggplot() +
geom_linerange(aes(x = analogy_condition, ymin = (mean - se), ymax = (mean + se))) +
geom_point(aes(x = analogy_condition, y = mean)) +
coord_flip() +
ylim(-.4, .2)
library(plotrix)
analogy_valenced_ic_absent_amp %>%
group_by(analogy_condition) %>%
summarize(mean = mean(diff),
se = std.error(diff)) %>%
ggplot() +
geom_linerange(aes(x = analogy_condition, ymin = (mean - se), ymax = (mean + se))) +
geom_point(aes(x = analogy_condition, y = mean)) +
coord_flip() +
ylim(-.4, .2)
analogy_valenced_ic_absent_amp %>%
group_by(analogy_condition) %>%
summarize(mean = mean(diff),
se = std.error(diff))
