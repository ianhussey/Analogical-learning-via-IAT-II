input_df %>%
dplyr::select(subject, #participant
blocknum,  #block_n
trialnum,  #trial_n
blockcode, #task
trialcode,  #item
response,
correct, #accuracy
latency,
amp_recognition_response) %>%  #rt
dplyr::rename(participant = subject,
block_n = blocknum,
trial_n = trialnum,
task = blockcode,
item = trialcode,
accuracy = correct,
rt = latency) %>%
dplyr::mutate(participant = as.numeric(participant))
# no base funciton for mode, so define one
modal_value <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
#separate each tasks and find uniques
participants_with_full_data <- #start with demographics
trimmed_df %>%
dplyr::filter(grepl("demographics", task)) %>%  # filter rows where the block_name includes string
dplyr::distinct(participant)
IAT <-
trimmed_df %>%
dplyr::filter(grepl("compatibletest", task)) %>%  # filter rows where the block_name includes string
dplyr::group_by(participant) %>%
dplyr::summarize(IAT_rows = n()) %>%  # count the number of trials per participant
dplyr::ungroup() %>%
dplyr::mutate(modal_IAT_rows = modal_value(IAT_rows)) %>%  # find modal n of trials
dplyr::rowwise() %>%
dplyr::filter(IAT_rows == modal_IAT_rows) %>% # if modal n != n then data is missing or participants has duplicate performance.
dplyr::select(-modal_IAT_rows)
participants_with_full_data <-
dplyr::semi_join(participants_with_full_data, IAT, by = "participant")
AMP <-
trimmed_df %>%
dplyr::filter(grepl("AMP_test", task)) %>%  # filter rows where the block_name includes string
dplyr::group_by(participant) %>%
dplyr::summarize(AMP_rows = n()) %>%  # count the number of trials per participant
dplyr::ungroup() %>%
dplyr::mutate(modal_AMP_rows = modal_value(AMP_rows)) %>%  # find modal n of trials
dplyr::rowwise() %>%
dplyr::filter(AMP_rows == modal_AMP_rows) %>% # if modal n != n then data is missing or participants has duplicate performance.
dplyr::select(-modal_AMP_rows)
participants_with_full_data <-
dplyr::semi_join(participants_with_full_data, AMP, by = "participant")
ratings <-
trimmed_df %>%
dplyr::filter(grepl("ratings", task)) %>%  # filter rows where the block_name includes string
dplyr::group_by(participant) %>%
dplyr::summarize(ratings_rows = n()) %>%  # count the number of trials per participant
dplyr::ungroup() %>%
dplyr::mutate(modal_ratings_rows = modal_value(ratings_rows)) %>%  # find modal n of trials
dplyr::rowwise() %>%
dplyr::filter(ratings_rows == modal_ratings_rows) %>% # if modal n != n then data is missing or participants has duplicate performance.
dplyr::select(-modal_ratings_rows)
participants_with_full_data <-
dplyr::semi_join(participants_with_full_data, ratings, by = "participant")
modern_racism_scale <-
trimmed_df %>%
dplyr::filter(grepl("racism_scale", task)) %>%  # filter rows where the block_name includes string
dplyr::group_by(participant) %>%
dplyr::summarize(racism_scale_rows = n()) %>%  # count the number of trials per participant
dplyr::ungroup() %>%
dplyr::mutate(modal_racism_scale_rows = modal_value(racism_scale_rows)) %>%  # find modal n of trials
dplyr::rowwise() %>%
dplyr::filter(racism_scale_rows == modal_racism_scale_rows) %>% # if modal n != n then data is missing or participants has duplicate performance.
dplyr::select(-modal_racism_scale_rows)
participants_with_full_data <-
dplyr::semi_join(participants_with_full_data, modern_racism_scale, by = "participant") %>%
select(-IAT_rows) %>%
mutate(complete = TRUE)
amp_recognition_scale <-
trimmed_df %>%
dplyr::filter(!is.na(amp_recognition_response)) %>%
dplyr::select(participant, amp_recognition_response)
participants_with_full_data <-
dplyr::semi_join(participants_with_full_data, modern_racism_scale, by = "participant") %>%
select(-IAT_rows) %>%
mutate(complete = TRUE)
participants_with_full_data <-
dplyr::semi_join(participants_with_full_data, modern_racism_scale, by = "participant") %>%
mutate(complete = TRUE)
amp_recognition_scale <-
trimmed_df %>%
dplyr::filter(!is.na(amp_recognition_response)) %>%
dplyr::select(participant, amp_recognition_response)
participants_with_full_data <-
dplyr::semi_join(participants_with_full_data, amp_recognition_scale, by = "participant")
# participants with at least partial data
participants_with_at_least_partial_data <-
trimmed_df %>%
dplyr::distinct(participant) %>%
dplyr::mutate(participant_partial = participant)
# participants with incomplete data
participants_with_incomplete_data <-
dplyr::anti_join(participants_with_at_least_partial_data, participants_with_full_data, by = "participant") %>%
select(-participant_partial) %>%
mutate(complete = FALSE,
block_n = NA, trial_n = NA, task = NA, item = NA, response = NA, accuracy = NA, rt = NA, amp_recognition_response = NA) %>%
filter(!is.na(participant))
screened_data <-
semi_join(trimmed_df, participants_with_full_data, by = "participant") %>%
mutate(complete = TRUE) %>%
rbind(participants_with_incomplete_data)
screened_data %>% write.csv("processed/screened data.csv", row.names = FALSE)
# 1. prolific codes for participants with complete data so that they can be paid
prolific_codes_for_complete_participants <-
dplyr::inner_join(trimmed_df, participants_with_full_data, by = "participant") %>%
dplyr::filter(item == "ProlificCode") %>%
dplyr::select(participant, response) %>%
dplyr::distinct(participant, .keep_all = TRUE)
# 1. prolific codes for participants with complete data so that they can be paid
prolific_codes_for_complete_participants <-
dplyr::inner_join(trimmed_df, participants_with_full_data, by = "participant") %>%
dplyr::filter(item == "ProlificCode") %>%
dplyr::select(participant, response) %>%
dplyr::distinct(participant, .keep_all = TRUE)
# participants to credit
prolific_codes_for_complete_participants %>% readr::write_csv("processed/prolific codes - complete data.csv")
# 1.1 N of complete participants
prolific_codes_for_complete_participants %>% dplyr::summarize(participant = n())
# 2. prolific codes for participants with incomplete data so that they can be rejected
prolific_codes_for_incomplete_participants <-
dplyr::inner_join(trimmed_df, participants_with_incomplete_data, by = "participant") %>%
dplyr::filter(item == "ProlificCode") %>%
dplyr::select(participant, response) %>%
dplyr::distinct(participant, .keep_all = TRUE)
prolific_codes_for_incomplete_participants %>% readr::write_csv("processed/prolific codes - incomplete data.csv")
# 2. prolific codes for participants with incomplete data so that they can be rejected
prolific_codes_for_incomplete_participants <-
dplyr::inner_join(trimmed_df, participants_with_incomplete_data, by = "participant") %>%
dplyr::filter(item == "ProlificCode") %>%
dplyr::select(participant, response) %>%
dplyr::distinct(participant, .keep_all = TRUE)
prolific_codes_for_incomplete_participants %>% readr::write_csv("processed/prolific codes - incomplete data.csv")
# 2.1 N of incomplete participants
prolific_codes_for_incomplete_participants %>% dplyr::summarize(participant = n())
library(plyr)
library(tidyverse)
library(data.table)
library(schoRsch)
# set the working directory
setwd("/Users/Ian/git/Analogical learning via the IAT II/experiment 2/data/processed")
# get screened data
input_df <- read.csv("screened data.csv")
# make some variable names more transparent
cleaned_df <-
input_df %>%
dplyr::mutate(participant = as.numeric(participant),
block_n = as.numeric(block_n),
trial_n = as.numeric(trial_n),
accuracy = as.numeric(accuracy),
rt = as.numeric(rt),
response = as.character(response)) %>%
filter(complete == TRUE)
cleaned_df <-
input_df %>%
dplyr::mutate(participant = as.numeric(participant),
block_n = as.numeric(block_n),
trial_n = as.numeric(trial_n),
accuracy = as.numeric(accuracy),
rt = as.numeric(rt),
response = as.character(response))
# make some variable names more transparent
cleaned_df <-
input_df %>%
dplyr::mutate(participant = as.numeric(participant),
block_n = as.numeric(block_n),
trial_n = as.numeric(trial_n),
accuracy = as.numeric(accuracy),
rt = as.numeric(rt),
response = as.character(response)) %>%
filter(complete == TRUE)
demo_temp_1_df <-
cleaned_df %>%
dplyr::group_by(participant) %>%
dplyr::filter(grepl("demographics", task),
item == "age") %>%  # filter rows where the task includes string
dplyr::rename(age = response) %>%
dplyr::mutate(age = as.numeric(age)) %>%
dplyr::select(participant, age) %>% # select only necessary columns
dplyr::distinct(participant, .keep_all = TRUE)
demo_temp_2_df <-
cleaned_df %>%
dplyr::group_by(participant) %>%
dplyr::filter(grepl("demographics", task),
item == "gender") %>%  # filter rows where the task includes string
dplyr::rename(gender = response) %>%
dplyr::select(participant, gender) %>% # select only necessary columns
dplyr::distinct(participant, .keep_all = TRUE) %>%
dplyr::mutate(gender = tolower(gender),  # homogenise gender categories. first make lower case
gender = ifelse(gender == "f", "female",  # then convert abbreviations
ifelse(gender == "m", "male", gender))) %>%
dplyr::left_join(demo_temp_1_df, by = "participant")
demo_temp_3_df <-
cleaned_df %>%
dplyr::filter(grepl("demographics", task)) %>%
dplyr::distinct(participant) %>%
dplyr::group_by(participant) %>%
dplyr::mutate(condition = participant %% 8,
condition = ifelse(condition == 0, 8, condition),  # convert participant codes to conditions and correct modulus%%8==0 to condition=8
IAT_condition = ifelse(condition <= 4, "Race IAT", "Flowers-Insects IAT"),
block_order = ifelse(condition %% 2 == 1, "congruent", "incongruent"),
task_order = ifelse(condition == 1 | condition == 2 | condition == 5 | condition == 6,
"ratings first", "SCIAT first")) %>%
dplyr::left_join(demo_temp_2_df, by = "participant")
# amp recognition
demographics_df <-
cleaned_df %>%
dplyr::filter(!is.na(amp_recognition_response)) %>%
dplyr::select(participant, amp_recognition_response) %>%
dplyr::left_join(demo_temp_3_df, by = "participant")
ratings_df <-
cleaned_df %>%
dplyr::filter(grepl("ratings", task)) %>%  # filter rows where the item includes string
dplyr::rename(ratings = response) %>%
dplyr::select(participant, ratings) %>%
dplyr::mutate(ratings = as.numeric(ratings)) %>%
dplyr::group_by(participant) %>%
dplyr::summarize(mean_rating = round(mean(ratings), 2))
racism_scale_df <-
cleaned_df %>%
dplyr::filter(grepl("racism_scale", task)) %>%  # filter rows where the item includes string
dplyr::select(participant, response) %>%
dplyr::group_by(participant) %>%
dplyr::mutate(response = as.integer(response)) %>%
dplyr::summarize(modern_racism_scale_total = sum(response))
IAT_summary_stats_df <-
cleaned_df %>%
dplyr::filter(task == "compatibletest1" |
task == "compatibletest2" |
task == "incompatibletest1" |
task == "incompatibletest2") %>% # test blocks only
dplyr::mutate(IAT_too_fast_trial = ifelse(rt < 300, 1, 0)) %>%
dplyr::group_by(participant) %>%
dplyr::summarize(IAT_mean_RT = round(mean(rt), 0),
IAT_perc_acc = round(sum(accuracy)/n(), 2),
IAT_percent_fast_trials = sum(IAT_too_fast_trial)/n()) %>%  # arbitrary number of test block trials
dplyr::mutate(IAT_exclude_based_on_fast_trials = ifelse(IAT_percent_fast_trials < 0.1, FALSE, TRUE)) %>%
dplyr::select(participant,
IAT_mean_RT,
IAT_perc_acc,
IAT_exclude_based_on_fast_trials)
AMP_summary_stats_df <-
cleaned_df %>%
dplyr::filter(task == "AMP_test") %>% # test block only
dplyr::select(participant,
accuracy,
rt,
item) %>%
dplyr::group_by(participant) %>%
dplyr::summarize(AMP_mean_RT = round(mean(rt), 0),
AMP_perc_acc = round(sum(accuracy)/n(), 2)) %>%  # arbitrary number of test block trials
dplyr::select(participant,
AMP_mean_RT,
AMP_perc_acc) %>%
ungroup()
AMP_summary_stats_2_df <-
cleaned_df %>%
dplyr::filter(task == "AMP_test") %>% # test block only
dplyr::select(participant,
accuracy,
rt,
item) %>%
dplyr::group_by(participant, item) %>%
dplyr::summarize(AMP_perc_acc = round(sum(accuracy)/n(), 3)) %>%  # arbitrary number of test block trials
spread(item, AMP_perc_acc) %>%
dplyr::rename(AMP_neutral_perc_acc = primeNeutral,
AMP_race_perc_acc = primeRace) %>%
dplyr::mutate(AMP_diff = AMP_race_perc_acc - AMP_neutral_perc_acc) %>%
dplyr::select(participant,
AMP_neutral_perc_acc,
AMP_race_perc_acc,
AMP_diff) %>%
ungroup()
wide_data_df <-
plyr::join_all(list(as.data.frame(demographics_df),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(racism_scale_df),
as.data.frame(ratings_df),
as.data.frame(IAT_summary_stats_df),
as.data.frame(AMP_summary_stats_df),
as.data.frame(AMP_summary_stats_2_df)),
by = "participant",
type = "full") %>%
dplyr::arrange(participant) %>%
dplyr::mutate(exclude = ifelse(IAT_exclude_based_on_fast_trials == TRUE, TRUE,
#ifelse(AMP_exclude_based_on_fast_trials == TRUE, TRUE,
FALSE))
# print N
wide_data_df %>% dplyr::summarize(condition_count = n())
wide_data_df %>% write.csv(file = "processed summary data - wide format.csv", row.names = FALSE)
other_tasks_df <-
wide_data_df %>%
dplyr::select(participant,
IAT_condition,
block_order,
task_order,
gender,
age,
modern_racism_scale_total,
amp_recognition_response,
IAT_exclude_based_on_fast_trials,
#AMP_exclude_based_on_fast_trials,
exclude)
AMP_long_format_df <-
cleaned_df %>%
dplyr::filter(task == "AMP_test") %>%
dplyr::select(participant,
accuracy,
rt,
item) %>%
dplyr::left_join(other_tasks_df, by = "participant")
AMP_long_format_df %>% write.csv(file = "processed AMP data - long format.csv", row.names = FALSE)
ratings_long_format_df <-
cleaned_df %>%
dplyr::filter(task == "ratings") %>%
dplyr::mutate(rating = as.integer(response)) %>%
dplyr::select(participant,
trial_n,
rating) %>%
dplyr::left_join(other_tasks_df, by = "participant")
ratings_long_format_df %>% write.csv(file = "processed ratings data - long format.csv", row.names = FALSE)
# make some variable names more transparent
cleaned_df <-
input_df %>%
dplyr::mutate(participant = as.numeric(participant),
block_n = as.numeric(block_n),
trial_n = as.numeric(trial_n),
accuracy = as.numeric(accuracy),
rt = as.numeric(rt),
response = as.character(response))
demo_temp_1_df <-
cleaned_df %>%
dplyr::group_by(participant) %>%
dplyr::filter(grepl("demographics", task),
item == "age") %>%  # filter rows where the task includes string
dplyr::rename(age = response) %>%
dplyr::mutate(age = as.numeric(age)) %>%
dplyr::select(participant, age) %>% # select only necessary columns
dplyr::distinct(participant, .keep_all = TRUE)
demo_temp_2_df <-
cleaned_df %>%
dplyr::group_by(participant) %>%
dplyr::filter(grepl("demographics", task),
item == "gender") %>%  # filter rows where the task includes string
dplyr::rename(gender = response) %>%
dplyr::select(participant, gender) %>% # select only necessary columns
dplyr::distinct(participant, .keep_all = TRUE) %>%
dplyr::mutate(gender = tolower(gender),  # homogenise gender categories. first make lower case
gender = ifelse(gender == "f", "female",  # then convert abbreviations
ifelse(gender == "m", "male", gender))) %>%
dplyr::left_join(demo_temp_1_df, by = "participant")
demo_temp_3_df <-
cleaned_df %>%
dplyr::filter(grepl("demographics", task)) %>%
dplyr::distinct(participant) %>%
dplyr::group_by(participant) %>%
dplyr::mutate(condition = participant %% 8,
condition = ifelse(condition == 0, 8, condition),  # convert participant codes to conditions and correct modulus%%8==0 to condition=8
IAT_condition = ifelse(condition <= 4, "Race IAT", "Flowers-Insects IAT"),
block_order = ifelse(condition %% 2 == 1, "congruent", "incongruent"),
task_order = ifelse(condition == 1 | condition == 2 | condition == 5 | condition == 6,
"ratings first", "SCIAT first")) %>%
dplyr::left_join(demo_temp_2_df, by = "participant")
# amp recognition
demographics_df <-
cleaned_df %>%
dplyr::filter(!is.na(amp_recognition_response)) %>%
dplyr::select(participant, amp_recognition_response) %>%
dplyr::left_join(demo_temp_3_df, by = "participant")
ratings_df <-
cleaned_df %>%
dplyr::filter(grepl("ratings", task)) %>%  # filter rows where the item includes string
dplyr::rename(ratings = response) %>%
dplyr::select(participant, ratings) %>%
dplyr::mutate(ratings = as.numeric(ratings)) %>%
dplyr::group_by(participant) %>%
dplyr::summarize(mean_rating = round(mean(ratings), 2))
racism_scale_df <-
cleaned_df %>%
dplyr::filter(grepl("racism_scale", task)) %>%  # filter rows where the item includes string
dplyr::select(participant, response) %>%
dplyr::group_by(participant) %>%
dplyr::mutate(response = as.integer(response)) %>%
dplyr::summarize(modern_racism_scale_total = sum(response))
IAT_summary_stats_df <-
cleaned_df %>%
dplyr::filter(task == "compatibletest1" |
task == "compatibletest2" |
task == "incompatibletest1" |
task == "incompatibletest2") %>% # test blocks only
dplyr::mutate(IAT_too_fast_trial = ifelse(rt < 300, 1, 0)) %>%
dplyr::group_by(participant) %>%
dplyr::summarize(IAT_mean_RT = round(mean(rt), 0),
IAT_perc_acc = round(sum(accuracy)/n(), 2),
IAT_percent_fast_trials = sum(IAT_too_fast_trial)/n()) %>%  # arbitrary number of test block trials
dplyr::mutate(IAT_exclude_based_on_fast_trials = ifelse(IAT_percent_fast_trials < 0.1, FALSE, TRUE)) %>%
dplyr::select(participant,
IAT_mean_RT,
IAT_perc_acc,
IAT_exclude_based_on_fast_trials)
AMP_summary_stats_df <-
cleaned_df %>%
dplyr::filter(task == "AMP_test") %>% # test block only
dplyr::select(participant,
accuracy,
rt,
item) %>%
dplyr::group_by(participant) %>%
dplyr::summarize(AMP_mean_RT = round(mean(rt), 0),
AMP_perc_acc = round(sum(accuracy)/n(), 2)) %>%  # arbitrary number of test block trials
dplyr::select(participant,
AMP_mean_RT,
AMP_perc_acc) %>%
ungroup()
AMP_summary_stats_2_df <-
cleaned_df %>%
dplyr::filter(task == "AMP_test") %>% # test block only
dplyr::select(participant,
accuracy,
rt,
item) %>%
dplyr::group_by(participant, item) %>%
dplyr::summarize(AMP_perc_acc = round(sum(accuracy)/n(), 3)) %>%  # arbitrary number of test block trials
spread(item, AMP_perc_acc) %>%
dplyr::rename(AMP_neutral_perc_acc = primeNeutral,
AMP_race_perc_acc = primeRace) %>%
dplyr::mutate(AMP_diff = AMP_race_perc_acc - AMP_neutral_perc_acc) %>%
dplyr::select(participant,
AMP_neutral_perc_acc,
AMP_race_perc_acc,
AMP_diff) %>%
ungroup()
wide_data_df <-
plyr::join_all(list(as.data.frame(demographics_df),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(racism_scale_df),
as.data.frame(ratings_df),
as.data.frame(IAT_summary_stats_df),
as.data.frame(AMP_summary_stats_df),
as.data.frame(AMP_summary_stats_2_df)),
by = "participant",
type = "full") %>%
dplyr::arrange(participant) %>%
dplyr::mutate(exclude = ifelse(IAT_exclude_based_on_fast_trials == TRUE, TRUE,
#ifelse(AMP_exclude_based_on_fast_trials == TRUE, TRUE,
FALSE))
View(wide_data_df)
demographics_df <- cleaned_df %>%
dplyr::filter(complete == FALSE)
View(demographics_df)
# missing data
demographics_df <- cleaned_df %>%
dplyr::filter(complete == FALSE) %>%
dplyr::left_join(demo_temp_4_df, by = "participant")
# amp recognition
demo_temp_4_df <- cleaned_df %>%
dplyr::filter(!is.na(amp_recognition_response)) %>%
dplyr::select(participant, amp_recognition_response) %>%
dplyr::left_join(demo_temp_3_df, by = "participant")
# missing data
demographics_df <- cleaned_df %>%
dplyr::filter(complete == FALSE) %>%
dplyr::left_join(demo_temp_4_df, by = "participant")
View(demographics_df)
# missing data
demographics_df <- cleaned_df %>%
dplyr::filter(complete == FALSE) %>%
rbind(demo_temp_4_df)
colnames(demo_temp_4_df)
colnames(demographics_df)
missing_df <- cleaned_df %>%
dplyr::filter(complete == FALSE)
View(missing_df)
missing_df <- cleaned_df %>%
dplyr::filter(complete == FALSE) %>%
select(participant, complete)
missing_df <- cleaned_df %>%
select(participant, complete)
wide_data_df <-
plyr::join_all(list(as.data.frame(missing_df),
as.data.frame(demographics_df),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(racism_scale_df),
as.data.frame(ratings_df),
as.data.frame(IAT_summary_stats_df),
as.data.frame(AMP_summary_stats_df),
as.data.frame(AMP_summary_stats_2_df)),
by = "participant",
type = "full") %>%
dplyr::arrange(participant) %>%
dplyr::mutate(exclude = ifelse(IAT_exclude_based_on_fast_trials == TRUE, TRUE,
#ifelse(AMP_exclude_based_on_fast_trials == TRUE, TRUE,
FALSE))
View(wide_data_df)
setwd("/Users/Ian/git/Analogical learning via the IAT II/experiment 2/data/processed")
# get screened data
input_df <- read.csv("screened data.csv")
# make some variable names more transparent
cleaned_df <-
input_df %>%
dplyr::mutate(participant = as.numeric(participant),
block_n = as.numeric(block_n),
trial_n = as.numeric(trial_n),
accuracy = as.numeric(accuracy),
rt = as.numeric(rt),
response = as.character(response))
