# SC-IAT D1 scores --------------------------------------------------------
# select relevant data
SCIAT_data_df <-
cleaned_df %>%
dplyr::filter(block_name == "compatibletest" |
block_name == "incompatibletest",
rt <= 10000)  # rts less than 10,000 only
# D1 and mean rt
SCIAT_D1_df <-
SCIAT_data_df %>%
dplyr::group_by(participant) %>%
dplyr::summarize(rt_mean_compatible = mean(rt[block_name == "compatibletest"], na.rm = TRUE),
rt_mean_incompatible = mean(rt[block_name == "incompatibletest"], na.rm = TRUE),
rt_sd = sd(rt[block_name == "compatibletest" | block_name == "incompatibletest"])) %>%
dplyr::mutate(diff = rt_mean_incompatible - rt_mean_compatible, # this is effectively a rowwise() calculation as we have group_by() participant and then summarize()'d. rowwise() not included for brevity.
SCIAT_D1 = round(diff / rt_sd, 3)) %>%
dplyr::select(participant,
SCIAT_D1)
# calculate % acc and % fast trials from test block data
SCIAT_data_df$too_fast_trial <- ifelse(SCIAT_data_df$rt < 300, 1, 0)  # add new column that records if RT < 300ms.
SCIAT_summary_stats_df <-
SCIAT_data_df %>%
dplyr::group_by(participant) %>%
dplyr::summarize(SCIAT_mean_RT = round(mean(rt), 0),
SCIAT_perc_acc = round(sum(accuracy)/n(), 2),
percent_fast_trials = sum(too_fast_trial)/n()) %>%  # arbitrary number of test block trials
dplyr::mutate(SCIAT_exclude_based_on_fast_trials = ifelse(percent_fast_trials < 0.1, FALSE, TRUE)) %>%
dplyr::select(participant,
SCIAT_mean_RT,
SCIAT_perc_acc,
SCIAT_exclude_based_on_fast_trials)
# Join data frames --------------------------------------------------------
output_df <-
plyr::join_all(list(as.data.frame(demographics_df),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(ratings_df),
as.data.frame(IAT_D1_df),
as.data.frame(IAT_summary_stats_df),
as.data.frame(SCIAT_D1_df),
as.data.frame(SCIAT_summary_stats_df),
#as.data.frame(racism_scale_df),
as.data.frame(demand_df)),
by = "participant",
type = "full")
?outlier
output_df %>% dplyr::summarize(condition_count = n())
output_df %>% filter(exclude == FALSE) %>% dplyr::summarize(condition_count = n())
output_df %>% dplyr::summarize(condition_count = n())
write.csv(output_df, file = "/Users/Ian/Dropbox/Work/Projects/Analogy/1 analogical learning via IAT with known stimuli/Experiment 1/data/processed data/processed data.csv", row.names = FALSE)
write.csv(output_df, file = "~/Dropbox/Work/Projects/Analogy/1 analogical learning via IAT with known stimuli/Experiment 1/data/processed data/processed data.csv", row.names = FALSE)
?arrange
output_df <-
plyr::join_all(list(as.data.frame(demographics_df),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(ratings_df),
as.data.frame(IAT_D1_df),
as.data.frame(IAT_summary_stats_df),
as.data.frame(SCIAT_D1_df),
as.data.frame(SCIAT_summary_stats_df),
#as.data.frame(racism_scale_df),
as.data.frame(demand_df)),
by = "participant",
type = "full") %>%
dplyr::arrange()
output_df %>% dplyr::summarize(condition_count = n())
write.csv(output_df, file = "~/Dropbox/Work/Projects/Analogy/1 analogical learning via IAT with known stimuli/Experiment 1/data/processed data/processed data.csv", row.names = FALSE)
output_df <-
plyr::join_all(list(as.data.frame(demographics_df),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(ratings_df),
as.data.frame(IAT_D1_df),
as.data.frame(IAT_summary_stats_df),
as.data.frame(SCIAT_D1_df),
as.data.frame(SCIAT_summary_stats_df),
#as.data.frame(racism_scale_df),
as.data.frame(demand_df)),
by = "participant",
type = "full") %>%
dplyr::arrange(participant)
output_df %>% dplyr::summarize(condition_count = n())
write.csv(output_df, file = "~/Dropbox/Work/Projects/Analogy/1 analogical learning via IAT with known stimuli/Experiment 1/data/processed data/processed data.csv", row.names = FALSE)
IAT_rts <-
cleaned_df %>%
dplyr::filter(block_name == "compatibletest1" |
block_name == "compatibletest2" |
block_name == "incompatibletest1" |
block_name == "incompatibletest2")
IAT_rts <-
cleaned_df %>%
dplyr::filter(block_name == "compatibletest1" |
block_name == "compatibletest2" |
block_name == "incompatibletest1" |
block_name == "incompatibletest2") %>%
dplyr::mutate(block = ifelse(block_name == "compatibletest1" | block_name == "compatibletest2", "compatible", "incompatible")) %>%
dplyr::select(participant,
condition,
block,
trial_n,
rt,
accuracy)
IAT_rts <-
cleaned_df %>%
dplyr::filter(block_name == "compatibletest1" |
block_name == "compatibletest2" |
block_name == "incompatibletest1" |
block_name == "incompatibletest2") %>%
dplyr::mutate(block = ifelse(block_name == "compatibletest1" | block_name == "compatibletest2", "compatible", "incompatible")) %>%
dplyr::select(participant,
block,
trial_n,
rt,
accuracy)
View(IAT_rts)
View(IAT_rts)
View(output_df)
View(output_df)
long_format_data <-
output_df %>%
dplyr::select(participant, IAT_condition, block_order,
task_order, gender, age, demand_compliance_boolean) # racism also needed
SCIAT_rts <-
cleaned_df %>%
dplyr::filter(block_name == "compatibletest" |
block_name == "incompatibletest") %>%
dplyr::mutate(block = ifelse(block_name == "compatibletest", "compatible", "incompatible")) %>%
dplyr::select(participant,
block,
trial_n,
rt,
accuracy)
View(SCIAT_rts)
View(SCIAT_rts)
IAT_rts_df <-
cleaned_df %>%
dplyr::filter(block_name == "compatibletest1" |
block_name == "compatibletest2" |
block_name == "incompatibletest1" |
block_name == "incompatibletest2") %>%
dplyr::mutate(block = ifelse(block_name == "compatibletest1" | block_name == "compatibletest2", "compatible", "incompatible")) %>%
dplyr::select(participant,
block,
trial_n,
rt,
accuracy)
SCIAT_rts_df <-
cleaned_df %>%
dplyr::filter(block_name == "compatibletest" |
block_name == "incompatibletest") %>%
dplyr::mutate(block = ifelse(block_name == "compatibletest", "compatible", "incompatible")) %>%
dplyr::select(participant,
block,
trial_n,
rt,
accuracy)
long_format_data <-
output_df %>%
dplyr::select(participant, IAT_condition, block_order,
task_order, gender, age, demand_compliance_boolean) # racism also needed
View(long_format_data)
View(long_format_data)
other_tasks_df <-
output_df %>%
dplyr::select(participant, IAT_condition, block_order,
task_order, gender, age, demand_compliance_boolean) # racism also needed
IAT_rts_df <-
cleaned_df %>%
dplyr::filter(block_name == "compatibletest1" |
block_name == "compatibletest2" |
block_name == "incompatibletest1" |
block_name == "incompatibletest2") %>%
dplyr::mutate(block = ifelse(block_name == "compatibletest1" | block_name == "compatibletest2", "compatible", "incompatible")) %>%
dplyr::select(participant,
block,
trial_n,
rt,
accuracy) %>%
dplyr::left_join(other_tasks_df, by = "participant")
View(IAT_rts_df)
View(IAT_rts_df)
ratings_long_format_df <-
cleaned_df %>%
dplyr::filter(block_name == "ratings")
View(ratings_long_format_df)
View(ratings_long_format_df)
ratings_long_format_df <-
cleaned_df %>%
dplyr::filter(block_name == "ratings") %>%
dplyr::mutate(response = as.integer(response))) %>%
dplyr::select(participant,
block,
trial_n,
response) %>%
dplyr::left_join(other_tasks_df, by = "participant")
ratings_long_format_df <-
cleaned_df %>%
dplyr::filter(block_name == "ratings") %>%
dplyr::mutate(response = as.integer(response)) %>%
dplyr::select(participant,
block,
trial_n,
response) %>%
dplyr::left_join(other_tasks_df, by = "participant")
ratings_long_format_df <-
cleaned_df %>%
dplyr::filter(block_name == "ratings") %>%
dplyr::mutate(response = as.integer(response)) %>%
dplyr::select(participant,
trial_n,
response) %>%
dplyr::left_join(other_tasks_df, by = "participant")
ratings_long_format_df <-
cleaned_df %>%
dplyr::filter(block_name == "ratings") %>%
dplyr::mutate(response = as.integer(response)) %>%
dplyr::select(participant,
trial_n,
response)
ratings_long_format_df <-
cleaned_df %>%
dplyr::filter(block_name == "ratings") %>%
dplyr::mutate(response = as.integer(response)) %>%
dplyr::select(participant,
trial_n,
response) %>%
dplyr::left_join(other_tasks_df, by = "participant")
IAT_long_format_df <-
cleaned_df %>%
dplyr::filter(block_name == "compatibletest1" |
block_name == "compatibletest2" |
block_name == "incompatibletest1" |
block_name == "incompatibletest2") %>%
dplyr::mutate(block = ifelse(block_name == "compatibletest1" | block_name == "compatibletest2", "compatible", "incompatible")) %>%
dplyr::select(participant,
block,
trial_n,
rt,
accuracy) %>%
dplyr::left_join(other_tasks_df, by = "participant") %>%
schoRsch::outlier(dv = "rt",
todo = "na",
upper.z = 2.5,
lower.z = -2.5,
res.name = "rt_outlier") %>%
IAT_long_format_df %>% write.csv
IAT_long_format_df %>% write.csv(file = "~/Dropbox/Work/Projects/Analogy/1 analogical learning via IAT with known stimuli/Experiment 1/data/processed data/long format IAT data.csv", row.names = FALSE)
IAT_long_format_df <-
cleaned_df %>%
dplyr::filter(block_name == "compatibletest1" |
block_name == "compatibletest2" |
block_name == "incompatibletest1" |
block_name == "incompatibletest2") %>%
dplyr::mutate(block = ifelse(block_name == "compatibletest1" | block_name == "compatibletest2", "compatible", "incompatible")) %>%
dplyr::select(participant,
block,
trial_n,
rt,
accuracy) %>%
dplyr::left_join(other_tasks_df, by = "participant")
IAT_long_format_df %>% write.csv(file = "~/Dropbox/Work/Projects/Analogy/1 analogical learning via IAT with known stimuli/Experiment 1/data/processed data/long format IAT data.csv", row.names = FALSE)
SCIAT_long_format_df %>% write.csv(file = "~/Dropbox/Work/Projects/Analogy/1 analogical learning via IAT with known stimuli/Experiment 1/data/processed data/long format SCIAT data.csv", row.names = FALSE)
SCIAT_long_format_df <-
cleaned_df %>%
dplyr::filter(block_name == "compatibletest" |
block_name == "incompatibletest") %>%
dplyr::mutate(block = ifelse(block_name == "compatibletest", "compatible", "incompatible")) %>%
dplyr::select(participant,
block,
trial_n,
rt,
accuracy) %>%
dplyr::left_join(other_tasks_df, by = "participant")
SCIAT_long_format_df %>% write.csv(file = "~/Dropbox/Work/Projects/Analogy/1 analogical learning via IAT with known stimuli/Experiment 1/data/processed data/long format SCIAT data.csv", row.names = FALSE)
ratings_long_format_df <-
cleaned_df %>%
dplyr::filter(block_name == "ratings") %>%
dplyr::mutate(response = as.integer(response)) %>%
dplyr::select(participant,
trial_n,
response) %>%
dplyr::left_join(other_tasks_df, by = "participant")
ratings_long_format_df %>% write.csv(file = "~/Dropbox/Work/Projects/Analogy/1 analogical learning via IAT with known stimuli/Experiment 1/data/processed data/long format ratings data.csv", row.names = FALSE)
ratings_long_format_df <-
cleaned_df %>%
dplyr::filter(block_name == "ratings") %>%
dplyr::mutate(rating = as.integer(response)) %>%
dplyr::select(participant,
trial_n,
rating) %>%
dplyr::left_join(other_tasks_df, by = "participant")
ratings_long_format_df %>% write.csv(file = "~/Dropbox/Work/Projects/Analogy/1 analogical learning via IAT with known stimuli/Experiment 1/data/processed data/long format ratings data.csv", row.names = FALSE)
IAT_long_format_df %>% write.csv(file = "~/Dropbox/Work/Projects/Analogy/1 analogical learning via IAT with known stimuli/Experiment 1/data/processed data/long IAT data.csv", row.names = FALSE)
SCIAT_long_format_df %>% write.csv(file = "~/Dropbox/Work/Projects/Analogy/1 analogical learning via IAT with known stimuli/Experiment 1/data/processed data/long SCIAT data.csv", row.names = FALSE)
ratings_long_format_df %>% write.csv(file = "~/Dropbox/Work/Projects/Analogy/1 analogical learning via IAT with known stimuli/Experiment 1/data/processed data/long ratings data.csv", row.names = FALSE)
write.csv(output_df, file = "~/Dropbox/Work/Projects/Analogy/1 analogical learning via IAT with known stimuli/Experiment 1/data/processed data/wide D1 scored data.csv", row.names = FALSE)
library(ez)
library(tidyverse)
library(car)
library(schoRsch)
library(afex)  # stacks on top of lmer for p values, eta2 etc
library(BayesFactor)
library(simr) # for power calculations via powerSim
library(pim)
IAT_data <-
read.csv("data/processed data/long SCIAT data.csv")
setwd("~/Dropbox/Work/Projects/Analogy/1 analogical learning via IAT with known stimuli/Experiment 1/")
IAT_data <-
read.csv("data/processed data/long SCIAT data.csv")
SCIAT_df <-
read.csv("data/processed data/long SCIAT data.csv") %>%
mutate(block = ifelse(block == 1, "B1C1_block", "B1C2_block"),
condition = as.factor(ifelse(condition == 1, "IAT_first", "IAT_second")),
participant = as.factor(participant),
block = as.factor(block))
SCIAT_df <-
read.csv("data/processed data/long SCIAT data.csv")
SCIAT_df <-
read.csv("data/processed data/long SCIAT data.csv")
View(SCIAT_df)
View(SCIAT_df)
SCIAT_df <-
read.csv("data/processed data/long SCIAT data.csv") %>%
mutate(condition = as.factor(condition),
participant = as.factor(participant),
block = as.factor(block))
SCIAT_df <-
read.csv("data/processed data/long SCIAT data.csv") %>%
mutate(IAT_condition = as.factor(IAT_condition),
participant = as.factor(participant),
block = as.factor(block))
SCIAT_df <-
read.csv("data/processed data/long SCIAT data.csv") %>%
mutate(IAT_condition = as.factor(IAT_condition),
participant = as.factor(participant),
task_order = as.factor(task_order),
block = as.factor(block))
sapply(IAT_data, class)
SCIAT_df <-
read.csv("data/processed data/long SCIAT data.csv")
sapply(IAT_data, class)
SCIAT_df <-
read.csv("data/processed data/long SCIAT data.csv") %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
plot(density(SCIAT_data$rt), col = "red")
SCIAT_data <-
read.csv("data/processed data/long SCIAT data.csv") %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
sapply(IAT_data, class)
sapply(SCIAT_data, class)
plot(density(SCIAT_data$rt), col = "red")
SCIAT_data <- read.csv("data/processed data/long SCIAT data.csv")
SCIAT_data_outliers_removed <-
SCIAT_data %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
sapply(SCIAT_data, class)
plot(density(SCIAT_data$rt), col = "red")
lines(density(SCIAT_data_outliers_removed$rt), col = "blue")
plot(density(SCIAT_data_outliers_removed$rt), col = "blue")
with(SCIAT_data_outliers_removed, interaction.plot(block, condition, rt))
with(SCIAT_data_outliers_removed, interaction.plot(block, SCIAT_condition, rt))
with(SCIAT_data_outliers_removed, interaction.plot(block, IAT_condition, rt))
model_1 <- afex::mixed(rt ~ block * condition + (1 | participant), # entering participant as a random effect acknowledges the non-independence of the multiple data points for each participant
contrasts = TRUE,  # set to true by default, but worth emphasising here that we're using effect coding not dummy coding.
data = SCIAT_data_outliers_removed,
type = 3,  # sum of squares
method = "KR",  # Kenward-Roger method of approximation of df for p values. Parametic bootstrapping ("PB") and liklihood ratio tests ("LR") also available.
progress = TRUE,
return = "mixed")
model_1 <- afex::mixed(rt ~ block * IAT_condition + (1 | participant), # entering participant as a random effect acknowledges the non-independence of the multiple data points for each participant
contrasts = TRUE,  # set to true by default, but worth emphasising here that we're using effect coding not dummy coding.
data = SCIAT_data_outliers_removed,
type = 3,  # sum of squares
method = "KR",  # Kenward-Roger method of approximation of df for p values. Parametic bootstrapping ("PB") and liklihood ratio tests ("LR") also available.
progress = TRUE,
return = "mixed")
summary(model_1)
print(model_1)  # same as using anova() here
plot(density(SCIAT_data$rt), col = "red")
lines(density(SCIAT_data_outliers_removed$rt), col = "blue")
plot(density(SCIAT_data_outliers_removed$rt), col = "blue")
with(SCIAT_data_outliers_removed, interaction.plot(block, IAT_condition, rt))
SCIAT_data_outliers_and_demand_compliance_removed <-
SCIAT_data %>%
filter(demand_compliance_boolean == FALSE)
SCIAT_data_outliers_removed <-
SCIAT_data %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
View(SCIAT_data_outliers_and_demand_compliance_removed)
View(SCIAT_data_outliers_and_demand_compliance_removed)
setwd("~/Dropbox/Work/Projects/Analogy/1 analogical learning via IAT with known stimuli/Experiment 1/")
SCIAT_data <- read.csv("data/processed data/long ratings data.csv")
setwd("~/Dropbox/Work/Projects/Analogy/1 analogical learning via IAT with known stimuli/Experiment 1/")
data <- read.csv("data/processed data/long ratings data.csv")
data_outliers_removed <-
data %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
data_outliers_removed <-
data %>%
schoRsch::outlier(dv = "rating",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
data_demand_compliance_removed <-
data %>%
filter(demand_compliance_boolean == FALSE)
data <- read.csv("data/processed data/long ratings data.csv")
data_demand_compliance_removed <-
data %>%
filter(demand_compliance_boolean == FALSE)
sapply(data, class)
plot(density(data$rating), col = "red")
lines(density(data_outliers_removed$rating), col = "blue")
plot(density(data_outliers_removed$rating), col = "blue")
with(data_outliers_removed, interaction.plot(block, IAT_condition, rating))
model_1 <- afex::mixed(rating ~ block * IAT_condition + modern_racism_scale_total + (1 | participant), # entering participant as a random effect acknowledges the non-independence of the multiple data points for each participant
contrasts = TRUE,  # set to true by default, but worth emphasising here that we're using effect coding not dummy coding.
data = data_outliers_removed,
type = 3,  # sum of squares
method = "KR",  # Kenward-Roger method of approximation of df for p values. Parametic bootstrapping ("PB") and liklihood ratio tests ("LR") also available.
progress = TRUE,
return = "mixed")
model_1 <- afex::mixed(rating ~ IAT_condition + modern_racism_scale_total + (1 | participant), # entering participant as a random effect acknowledges the non-independence of the multiple data points for each participant
contrasts = TRUE,  # set to true by default, but worth emphasising here that we're using effect coding not dummy coding.
data = data_outliers_removed,
type = 3,  # sum of squares
method = "KR",  # Kenward-Roger method of approximation of df for p values. Parametic bootstrapping ("PB") and liklihood ratio tests ("LR") also available.
progress = TRUE,
return = "mixed")
model_1 <- afex::mixed(rating ~ IAT_condition + (1 | participant), # entering participant as a random effect acknowledges the non-independence of the multiple data points for each participant
contrasts = TRUE,  # set to true by default, but worth emphasising here that we're using effect coding not dummy coding.
data = data_outliers_removed,
type = 3,  # sum of squares
method = "KR",  # Kenward-Roger method of approximation of df for p values. Parametic bootstrapping ("PB") and liklihood ratio tests ("LR") also available.
progress = TRUE,
return = "mixed")
summary(model_1)
print(model_1)  # same as using anova() here
model_4 <- generalTestBF(rating ~ IAT_condition + participant,
whichRandom = "participant",  # random factors
data = data_demand_compliance_removed,
rscaleFixed = "medium",  # default
rscaleCont = "medium",  # default
rscaleRandom = "nuisance",  # default
multicore = TRUE)
sapply(data, class)
data <-
read.csv("data/processed data/long ratings data.csv") %>%
mutate(participant = as.factor(participant))
data_demand_compliance_removed <-
data %>%
filter(demand_compliance_boolean == FALSE)
sapply(data, class)
model_2 <- generalTestBF(rt ~ block * IAT_condition + modern_racism_scale_total + participant,
whichRandom = "participant",  # random factors
data = data_outliers_removed,
rscaleFixed = "medium",  # default
rscaleCont = "medium",  # default
rscaleRandom = "nuisance",  # default
multicore = TRUE)
model_2 <- generalTestBF(rating ~ IAT_condition + participant,
whichRandom = "participant",  # random factors
data = data_outliers_removed,
rscaleFixed = "medium",  # default
rscaleCont = "medium",  # default
rscaleRandom = "nuisance",  # default
multicore = TRUE)
sapply(data, class)
model_4 <- generalTestBF(rating ~ IAT_condition + participant,
whichRandom = "participant",  # random factors
data = data_demand_compliance_removed,
rscaleFixed = "medium",  # default
rscaleCont = "medium",  # default
rscaleRandom = "nuisance",  # default
multicore = TRUE)
model_4
model_4["block + IAT_condition + block:IAT_condition + participant"] /
model_4["block + IAT_condition + participant"]
model_4["IAT_condition + participant"] /
model_4[" + participant"]
model_4["IAT_condition + participant"] /
model_4["participant"]
# Screen data
# author: Ian Hussey (ian.hussey@ugent.be)
# license: GPLv3+
# Dependencies ------------------------------------------------------------
library(plyr)
library(tidyverse)
library(data.table)
# Data acquisition and cleaning -------------------------------------------
## Set the working directory
setwd("/Users/Ian/Dropbox/Work/Projects/Analogy/1 analogical learning via IAT with known stimuli/Experiment 1/data/pilot 1/")
# Read all files with the .iqdat extension
files <- list.files(pattern = "demographics")
# Read these files sequentially into a single data frame
input_df <- dplyr::tbl_df(plyr::rbind.fill(lapply(files, data.table::fread, header = TRUE)))  # tbl_df() requires dplyr, rbind.fill() requires plyr, fread requires data.table
# remove prolific rows and save -------------------------------------------
# NB original file must be deleted too.
prolific_ids_trimmed <- #start with demographics
input_df %>%
dplyr::filter(trialcode != "ProlificCode") %>%
write.csv("demographics.csv")
